import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import StateFilter
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums.parse_mode import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile
from dotenv import load_dotenv
import requests
import json
import io
import csv
import random
import string
from datetime import datetime, time
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.getenv('TG_BOT_TOKEN')
FASTAPI_URL = os.getenv('FASTAPI_URL')
headers={os.getenv('FASTAPI_KEY_NAME'): os.getenv('FASTAPI_TOKEN')}
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class States(StatesGroup):
    mainmenu = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def starting(sms: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        req = requests.get(f"{FASTAPI_URL}/check_id_user_tg/{sms.from_user.id}", headers=headers)
        print(req.text)
        print(req)
        if req.status_code == 404:
            await bot.send_message(sms.from_user.id, "–ü—Ä–∏–≤–µ—Ç!\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ: /auth {code}.")
        elif req.status_code == 200:
            await bot.send_message(sms.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!")
            id_user = json.loads(requests.get(f"{FASTAPI_URL}/get_id_user_by_id_user_tg/{sms.from_user.id}",headers=headers).text)['id_user']
            await state.update_data(id_user=id_user)
            await show_main_menu(sms.from_user.id)
            await state.set_state(States.mainmenu)
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /auth
@dp.message(StateFilter(None), Command('auth'))
async def auth_with_code(sms: types.Message, state: FSMContext):
    try:
        code = sms.text.split()[1]
        check_code = requests.get(f"{FASTAPI_URL}/check_auth_key/{code}",headers=headers)
        if check_code.status_code == 200:
            auth_user = requests.post(f"{FASTAPI_URL}/auth_user/?auth_key={code}&id_user_tg={sms.from_user.id}",headers=headers)
            if auth_user.status_code == 200:
                id_user = json.loads(requests.get(f"{FASTAPI_URL}/get_id_user_by_id_user_tg/{sms.from_user.id}",headers=headers).text)['id_user']
                await state.update_data(id_user=id_user)
                await state.set_state(States.mainmenu)
                await bot.send_message(sms.from_user.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                await show_main_menu(sms.from_user.id)
            else:
                await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await bot.send_message(sms.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except IndexError:
        await bot.send_message(sms.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /auth {code}.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /weather
@dp.message(States.mainmenu, Command('weather'))
async def get_weather(sms: types.Message, state: FSMContext):
    user_data = await state.get_data()
    id_user = user_data['id_user']
    try:
        city_name = ' '.join(sms.text.split()[1:])
        if not city_name:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥
            user_info = json.loads(requests.get(f"{FASTAPI_URL}/get_user_by_id_user/{id_user}", headers=headers).text)
            city_name = user_info['home_city']
            if city_name == "unknown":
                await bot.send_message(sms.from_user.id, "–î–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_home_city {city}.")
                return

        # –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
        weather_response = requests.get(f"{FASTAPI_URL}/weather_query/?id_user={id_user}&city={city_name}", headers=headers)
        if weather_response.status_code == 200:
            weather_data = weather_response.json()
            weather_message = (
                f"üåÜ –ì–æ—Ä–æ–¥: {weather_data['weather'][0]}\n"
                f"üå§ –ü–æ–≥–æ–¥–∞: {weather_data['weather'][1]}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['weather'][2]}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['weather'][3]}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['weather'][4]}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['weather'][5]}%\n"
                f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['weather'][6]} –º–º —Ä—Ç.—Å—Ç.\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['weather'][7]} –º/—Å\n"
                f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {weather_data['weather'][8]}\n"
                f"üåÖ –í–æ—Å—Ö–æ–¥: {weather_data['weather'][9]}\n"
                f"üåá –ó–∞–∫–∞—Ç: {weather_data['weather'][10]}\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {weather_data['weather'][11]}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            icon = weather_data['icon']  # –ö–æ–¥ –∏–∫–æ–Ω–∫–∏ –∏–∑ API
            icon_path = f"icons/{icon}.png"  # –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –ø–∞–ø–∫–µ icons

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                with open(icon_path, "rb") as icon_file:
                    icon_bytes = icon_file.read()
                    icon_input_file = BufferedInputFile(icon_bytes, filename=f"{icon}.png")
                    await bot.send_photo(sms.from_user.id, icon_input_file, caption=weather_message, parse_mode=ParseMode.HTML)
            except FileNotFoundError:
                # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∫–æ–Ω–∫–∏
                await bot.send_message(sms.from_user.id, weather_message, parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(sms.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /set_home_city
@dp.message(States.mainmenu, Command('set_home_city'))
async def set_home_city(sms: types.Message, state: FSMContext):
    try:
        city_name = ' '.join(sms.text.split()[1:])
        if not city_name:
            await bot.send_message(sms.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.")
            return

        user_data = await state.get_data()
        id_user = user_data['id_user']
        set_city_response = requests.post(f"{FASTAPI_URL}/set_user_home_city/?id_user={id_user}&home_city={city_name}",headers=headers)
        if set_city_response.status_code == 200:
            await bot.send_message(sms.from_user.id, "–î–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /history
@dp.message(States.mainmenu, Command('history'))
async def get_history(sms: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data['id_user']
        history_response = requests.get(f"{FASTAPI_URL}/get_weather_history/{id_user}", headers=headers)
        if history_response.status_code == 200:
            history = history_response.json()
            if history:
                # –°–æ–∑–¥–∞–µ–º CSV-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
                csv_buffer = io.StringIO()
                csv_writer = csv.writer(csv_buffer)

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
                csv_writer.writerow([
                    "–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞", "–ì–æ—Ä–æ–¥", "–ü–æ–≥–æ–¥–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
                    "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ (¬∞C)", "–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", "–î–∞–≤–ª–µ–Ω–∏–µ (–º–º —Ä—Ç.—Å—Ç.)",
                    "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ (–º/—Å)", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞", "–í–æ—Å—Ö–æ–¥", "–ó–∞–∫–∞—Ç", "–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"
                ])

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
                for record in history:
                    csv_writer.writerow([
                        record['query_timestamp'],  # –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
                        record['city_name'],  # –ì–æ—Ä–æ–¥
                        record['weather_main'],  # –ü–æ–≥–æ–¥–∞
                        record['weather_description'],  # –û–ø–∏—Å–∞–Ω–∏–µ
                        round(record['temperature'],2),  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                        round(record['temperature_feels_like'],2),  # –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫
                        record['humidity'],  # –í–ª–∞–∂–Ω–æ—Å—Ç—å
                        record['pressure'],  # –î–∞–≤–ª–µ–Ω–∏–µ
                        round(record['wind_speed'],2),  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
                        record['wind_direction'],  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞
                        record['sunrise'],  # –í–æ—Å—Ö–æ–¥
                        record['sunset'],  # –ó–∞–∫–∞—Ç
                        record['data_calculation'],  # –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                    ])

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –≤ –±–∞–π—Ç—ã
                csv_buffer.seek(0)
                csv_bytes = csv_buffer.getvalue().encode('utf-8-sig')

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                random_letter = random.choice(string.ascii_uppercase)
                random_digits = ''.join(random.choices(string.digits, k=3))
                random_letters = ''.join(random.choices(string.ascii_uppercase, k=3))
                filename = f"weather_history_{random_letter}{random_digits}{random_letters}.csv"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                csv_file = BufferedInputFile(csv_bytes, filename=filename)
                await bot.send_document(sms.from_user.id, csv_file, caption="üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–≥–æ–¥—ã")
            else:
                await bot.send_message(sms.from_user.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(user_id):
    menu = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="/weather"), KeyboardButton(text="/history")],
        [KeyboardButton(text="/set_home_city"), KeyboardButton(text="/set_name")],
        [KeyboardButton(text="/notification"), KeyboardButton(text="/delete_notification")]
    ], resize_keyboard=True)
    await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu)
# –ö–æ–º–∞–Ω–¥–∞ /notification
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ
async def send_weather_notification(user_id: int, home_city: str):
    try:
        # –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –≥–æ—Ä–æ–¥–∞
        weather_response = requests.get(f"{FASTAPI_URL}/weather_query/?id_user={user_id}&city={home_city}", headers=headers)
        if weather_response.status_code == 200:
            weather_data = weather_response.json()
            weather_message = (
                f"üåÜ –ì–æ—Ä–æ–¥: {weather_data['weather'][0]}\n"
                f"üå§ –ü–æ–≥–æ–¥–∞: {weather_data['weather'][1]}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['weather'][2]}\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['weather'][3]}¬∞C\n"
                f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['weather'][4]}¬∞C\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['weather'][5]}%\n"
                f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {weather_data['weather'][6]} –º–º —Ä—Ç.—Å—Ç.\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['weather'][7]} –º/—Å\n"
                f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {weather_data['weather'][8]}\n"
                f"üåÖ –í–æ—Å—Ö–æ–¥: {weather_data['weather'][9]}\n"
                f"üåá –ó–∞–∫–∞—Ç: {weather_data['weather'][10]}\n"
                f"‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {weather_data['weather'][11]}"
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            icon = weather_data['icon']  # –ö–æ–¥ –∏–∫–æ–Ω–∫–∏ –∏–∑ API
            icon_path = f"icons/{icon}.png"  # –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –≤ –ø–∞–ø–∫–µ icons

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                with open(icon_path, "rb") as icon_file:
                    icon_bytes = icon_file.read()
                    icon_input_file = BufferedInputFile(icon_bytes, filename=f"{icon}.png")
                    await bot.send_photo(user_id, icon_input_file, caption=weather_message, parse_mode=ParseMode.HTML)
            except FileNotFoundError:
                # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∫–æ–Ω–∫–∏
                await bot.send_message(user_id, weather_message, parse_mode=ParseMode.HTML)
        else:
            await bot.send_message(user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
    except Exception as e:
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

async def check_notifications():
    while True:
        now = datetime.now().time().replace(second=0, microsecond=0)
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {now.strftime('%H:%M')}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            response = requests.get(f"{FASTAPI_URL}/get_notifications_by_time/?notification_time={now.strftime('%H:%M')}",
                                    headers=headers)

            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.status_code} - {response.text}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                notifications = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–æ—Ç–≤–µ—Ç –≤ Python-–æ–±—ä–µ–∫—Ç
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ notifications —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º
                if isinstance(notifications, list):
                    for notification in notifications:
                        user_id = notification.get('id_user_tg')
                        home_city = notification.get('home_city')

                        if user_id and home_city:
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {home_city}")
                            await send_weather_notification(user_id, home_city)
                        else:
                            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification}")
                else:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notifications}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
@dp.message(States.mainmenu, Command('notification'))
async def set_notification(sms: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data['id_user']
        user_info = json.loads(requests.get(f"{FASTAPI_URL}/get_user_by_id_user/{id_user}", headers=headers).text)
        home_city = user_info['home_city']

        if home_city == "unknown":
            await bot.send_message(sms.from_user.id, "–î–æ–º–∞—à–Ω–∏–π –≥–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_home_city {city}.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_time = sms.text.split()[1]
        try:
            time_obj = datetime.strptime(notification_time, '%H:%M').time()
        except ValueError:
            await bot.send_message(sms.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        set_notification_response = requests.post(
            f"{FASTAPI_URL}/set_notification_time/?id_user={id_user}&notification_type=weather&notification_time={notification_time}",
            headers=headers
        )
        if set_notification_response.status_code == 200:
            await bot.send_message(sms.from_user.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {notification_time}.")
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except IndexError:
        await bot.send_message(sms.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /notification HH:MM.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
async def main():
    asyncio.create_task(check_notifications())  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    await dp.start_polling(bot)


@dp.message(States.mainmenu, Command('delete_notification'))
async def delete_notification(sms: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data['id_user']

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_time = sms.text.split()[1]
        try:
            time_obj = datetime.strptime(notification_time, '%H:%M').time()
        except ValueError:
            await bot.send_message(sms.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM.")
            return

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        delete_notification_response = requests.delete(
            f"{FASTAPI_URL}/delete_notification_time/?id_user={id_user}&notification_time={notification_time}",
            headers=headers
        )
        if delete_notification_response.status_code == 200:
            await bot.send_message(sms.from_user.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {notification_time} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    except IndexError:
        await bot.send_message(sms.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /delete_notification HH:MM.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message(States.mainmenu, Command('set_name'))
async def set_name(sms: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        id_user = user_data['id_user']

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name = ' '.join(sms.text.split()[1:])
        if not name:
            await bot.send_message(sms.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_name_response = requests.post(
            f"{FASTAPI_URL}/set_user_name/?id_user={id_user}&user_name={name}",
            headers=headers
        )
        if set_name_response.status_code == 200:
            await bot.send_message(sms.from_user.id, f"–ò–º—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {name}.")
        else:
            await bot.send_message(sms.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–º–µ–Ω–∏.")
    except IndexError:
        await bot.send_message(sms.from_user.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /set_name –ò–º—è.")
    except Exception as e:
        await bot.send_message(sms.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())